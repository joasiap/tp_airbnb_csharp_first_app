@inject Microsoft.AspNetCore.Http.IHttpContextAccessor HttpContextAccessor
@using Microsoft.AspNetCore.Http
@inject Microsoft.AspNetCore.Antiforgery.IAntiforgery  antiforgery

@{
    var idProprietaire = ViewData["idProprietaire"];
    var idUtilisateurAuthentifie = Convert.ToInt32(HttpContextAccessor.HttpContext.Session.GetInt32("userId"));
    var token = antiforgery.GetAndStoreTokens(HttpContextAccessor.HttpContext).RequestToken;
}


@Html.Hidden("utilisateur", idUtilisateurAuthentifie)
@Html.Hidden("idProprietaire", idProprietaire)
<div class="container-fluid">
    <div class="chat_window">
        <div class="top_menu">
            <div class="title">Messagerie</div>
        </div>
        <ul class="messages"></ul>
        <div class="bottom_wrapper clearfix">
            <div class="message_input_wrapper">
                <input class="message_input" placeholder="Votre message..." />
            </div>
            <div class="send_message">
                <div class="icon"></div>
                <div class="text">Envoyer</div>
            </div>
        </div>
    </div>
    <div class="message_template">
        <li class="message">
            <div class="avatar"></div>
            <div class="text_wrapper">
                <div class="text"></div>
            </div>
        </li>
    </div>

    <div class="row">
        <div id="js-errors" class="col-lg-12"></div>
    </div>
</div>
<script src="//code.jquery.com/jquery-1.11.3.min.js"></script>
<script>
    (function () {
        let utilisateurAuthentifie = $('#utilisateur').val();
        let idProprietaire = $('#idProprietaire').val();
        let $jsErrors = $('#js-errors');
        var Message;
        Message = function (arg) {
            this.text = arg.text, this.message_side = arg.message_side;
            this.draw = function (_this) {
                return function () {
                    var $message;
                    $message = $($('.message_template').clone().html());
                    $message.addClass(_this.message_side).find('.text').html(_this.text);
                    $('.messages').append($message);
                    return setTimeout(function () {
                        return $message.addClass('appeared');
                    }, 0);
                };
            }(this);
            return this;
        };
        $(function () {
            var getMessageText, message_side, sendMessage;
            message_side = 'right';
            // récupère le message dans input
            getMessageText = function () {
                var $message_input;
                $message_input = $('.message_input');
                return $message_input.val();
            };

            // envoi du message dans la messagerie -> effet visuel uniquement
            sendMessage = function (text, message_side) {
                var $messages, message;
                if (text.trim() === '') {
                    return;
                }
                $('.message_input').val('');
                $messages = $('.messages');
                message = new Message({
                    text: text,
                    message_side: message_side
                });
                message.draw();
                message_side = '';
                return $messages.animate({ scrollTop: $messages.prop('scrollHeight') }, 300);
            };

            // permet d'enregistrer le message dans la BDD 
            posterMessage = function () {

                  // var token = document.querySelector('input[name="__RequestVerificationToken"]').getAttribute("value");
                /*
                 *  headers: {
                        "RequestVerificationToken": token
                    },*/
                let textMessage = getMessageText();
                let data = { idProprietaire: idProprietaire, idUtilisateur: utilisateurAuthentifie, contenu: textMessage };
                // AJAX -> poster un message
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Create", "Messages")',
                    data: JSON.stringify(data),
                    dataType: 'json',
                    contentType: "application/json; charset=utf-8",
                    processData: false,
                    error: function (response) {
                        viderErreurs($jsErrors);
                        afficherErreurs("Echec lors de l'envoi de message", $jsErrors);
                    },
                    success: function (response) {
                        if (response.success) {
                            message_side = 'right';
                            return sendMessage(textMessage, message_side);
                        } else {
                            viderErreurs($jsErrors);
                            afficherErreurs("Une erreur s'est produite lors de l'envoi de message", $jsErrors);
                        }
                },

                });
            // fin appel AJAX

            }

            // envoi de messages suite au clic
            $('.send_message').click(function (e) {
                posterMessage();
            });
            // envoi de message si on presse Enter
            $('.message_input').keyup(function (e) {
                if (e.which === 13) {
                    posterMessage();
                }
            });




            // AJAX -> récupérer les messages
            $.ajax({
                type: "GET",
                url: '@Url.Action("GetMessages", "Messages")',
                data: "idProprietaire=" + idProprietaire + "&idUtilisateur=" + utilisateurAuthentifie,
                processData: false,
                success: function (response, status, xhr) {
                    // la réponse est un STRING avec des données JSON donc il faut la parser pour obtenir un objet JSON en JS
                    let messagesjsonArray = JSON.parse(response);
                    $.each(messagesjsonArray, function (i, val) {
                        // messages utilisateur d'un côté
                        if (utilisateurAuthentifie == val.Emetteur.Id) {
                            message_side = 'right';
                        }
                        else {
                            message_side = 'left';
                        }
                        sendMessage(val.Contenu, message_side);
                    });
                },
            });
            // fin appel AJAX récupération de messages
        });



        // fonction qui affiche les erreurs js/jquery dans le div #js-errors
        function afficherErreurs(message, jsErrors) {
            //on vide le div des erreurs précédentes s'il y en avait pour afficher de nouvelles
            jsErrors.empty();
            // si on laisse la classe tout le temps, il y aura un encadré rouge vide sur la page
            if (jsErrors.hasClass("alert alert-danger mx-auto")) {
                jsErrors.removeClass("alert alert-danger mx-auto");
                jsErrors.fadeOut(300); // effet de disparition
            }
            jsErrors.addClass("alert alert-danger mx-auto");
            jsErrors.append(message);
            jsErrors.fadeIn(300); // effet d'apparition
            return setTimeout(function () {
                return viderErreurs(jsErrors);
            }, 2000);
        }
        // fonction qui vide le div #js-errors de toutes les erreurs qu'il contient
        function viderErreurs(jsErrors) {
            jsErrors.empty();
            if (jsErrors.hasClass("alert alert-danger mx-auto")) {
                jsErrors.removeClass("alert alert-danger mx-auto");
               // jsErrors.fadeOut(500);
            }
        }
    }.call(this));
</script>